---
title: "TrafficAssign.jl"
format: gfm
---

TrafficAssign is a Julia package for...

1. Load [Transportation Networks](https://github.com/bstabler/TransportationNetworks) data or construct traffic data from data frames.
1. Traffic assignment with User Equilibrium.

## Load traffic data

`load_tntp()` loads [Transportation Networks](https://github.com/bstabler/TransportationNetworks) data ([TNTP](https://www.bgu.ac.il/~bargera/tntp/) format).

`Traffic()` creates traffic data from trip and network data frames.

```{julia}
#| label: load-traffic-data
#| warning: false

using TrafficAssign

traffic = load_tntp("Anaheim")
```

```{julia}
#| label: save-traffic-data
#| eval: false
#| echo: false

using TrafficAssign
using CSV

traffic = load_tntp("SiouxFalls")

if !isdir("README_files/traffic-data/SiouxFalls")
    mkpath("README_files/traffic-data/SiouxFalls")
end

CSV.write("README_files/traffic-data/SiouxFalls/trips.csv", traffic.trips)
CSV.write("README_files/traffic-data/SiouxFalls/network.csv", traffic.network)
```

<!-- 
```{julia}
#| label: load-traffic-data-csv
#| echo: false
#| output: false

using CSV
using DataFrames

trips = CSV.read("README_files/traffic-data/SiouxFalls/trips.csv", DataFrame)
network = CSV.read("README_files/traffic-data/SiouxFalls/network.csv", DataFrame)
```

```{julia}
trips
network

Traffic(trips, network)
```
-->

## Traffic assignment

`assign_traffic()` solves traffic assignment problems.
By default, the `BiconjugateFrankWolfe()` algorithm is used.

```{julia}
#| label: simple-traffic-assignment

res = assign_traffic(traffic)
```

```{julia}
#| label: simple-traffic-assignment-flow
#| eval: false

# Get flow from traffic assignment results
res.flow
```

```{julia}
#| label: save-simple-traffic-assignment-results
#| echo: false
#| output: false

using DataFrames
using CSV

function frank_wolfe_results(res)
    traffic = res.traffic
    flow = DataFrame(
        from=traffic.from,
        to=traffic.to,
        flow=res.flow
    )

    logs = res.logs
    logs = DataFrame(
        exec_time=logs.exec_time,
        objective=logs.objective,
        relative_gap=logs.relative_gap
    )

    return flow, logs
end

flow, logs = frank_wolfe_results(res)

if !isdir("README_files/traffic-assignment-results/Anaheim")
    mkpath("README_files/traffic-assignment-results/Anaheim")
end

CSV.write("README_files/traffic-assignment-results/Anaheim/flow.csv", flow)
CSV.write("README_files/traffic-assignment-results/Anaheim/logs.csv", logs)
```

```{r}
#| label: plot-a-network
#| echo: false
#| warning: false

library(tidyverse)
library(fs)
library(sf)

theme_set(theme_light())

flow <- read_csv("README_files/traffic-assignment-results/Anaheim/flow.csv",
                 col_types = cols(.default = "n"))

network <- dir_ls(regexp = "^TransportationNetworks[^/]+/Anaheim/anaheim.geojson$", 
                  recurse = TRUE) |>
  read_sf() |>
  select(init_node, term_node) |>
  left_join(flow,
            by = c("init_node" = "from",
                   "term_node" = "to"))

ggplot(network,
       aes(color = flow)) +
  geom_sf() +
  scale_color_viridis_c(option = "turbo")
```

## Traffic assignment algorithms

Now, the following algorithms are available.

- `FrankWolfe()`
- `ConjugateFrankWolfe()`
- `BiconjugateFrankWolfe()`
- `RestrictedSimplicialDecomposition()`

```{julia}
#| label: compare-algorithms
#| eval: false

# Requires long execution time.
traffic = load_tntp("GoldCoast")

res_FW = assign_traffic(traffic, algorithm=FrankWolfe())
res_CFW = assign_traffic(traffic, algorithm=ConjugateFrankWolfe())
res_BFW = assign_traffic(traffic, algorithm=BiconjugateFrankWolfe())
res_RSD_5 = assign_traffic(traffic, algorithm=RestrictedSimplicialDecomposition(max_points=5))
# res_RSD_10 = assign_traffic(traffic, algorithm=RestrictedSimplicialDecomposition(max_points=10))
```

```{julia}
#| label: save-traffic-assignment-results
#| eval: false
#| echo: false

using DataFrames
using CSV

if !isdir("README_files/traffic-assignment-results/GoldCoast")
    mkpath("README_files/traffic-assignment-results/GoldCoast")
end

function frank_wolfe_results(res)
    traffic = res.traffic
    flow = DataFrame(
        from=traffic.from,
        to=traffic.to,
        flow=res.flow
    )

    logs = res.logs
    logs = DataFrame(
        exec_time=logs.exec_time,
        objective=logs.objective,
        relative_gap=logs.relative_gap
    )

    return flow, logs
end

flow_FW, logs_FW = frank_wolfe_results(res_FW)
flow_CFW, logs_CFW = frank_wolfe_results(res_CFW)
flow_BFW, logs_BFW = frank_wolfe_results(res_BFW)
flow_RSD_5, logs_RSD_5 = frank_wolfe_results(res_RSD_5)

CSV.write("README_files/traffic-assignment-results/GoldCoast/flow_FW.csv", flow_FW)
CSV.write("README_files/traffic-assignment-results/GoldCoast/flow_CFW.csv", flow_CFW)
CSV.write("README_files/traffic-assignment-results/GoldCoast/flow_BFW.csv", flow_BFW)
CSV.write("README_files/traffic-assignment-results/GoldCoast/flow_RSD_5.csv", flow_RSD_5)

CSV.write("README_files/traffic-assignment-results/GoldCoast/logs_FW.csv", logs_FW)
CSV.write("README_files/traffic-assignment-results/GoldCoast/logs_CFW.csv", logs_CFW)
CSV.write("README_files/traffic-assignment-results/GoldCoast/logs_BFW.csv", logs_BFW)
CSV.write("README_files/traffic-assignment-results/GoldCoast/logs_RSD_5.csv", logs_RSD_5)
```

```{julia}
#| label: load-frank-wolfe results
#| echo: false
#| output: false

using CSV
using DataFrames

logs_FW = CSV.read("README_files/traffic-assignment-results/GoldCoast/logs_FW.csv", DataFrame)
logs_CFW = CSV.read("README_files/traffic-assignment-results/GoldCoast/logs_CFW.csv", DataFrame)
logs_BFW = CSV.read("README_files/traffic-assignment-results/GoldCoast/logs_BFW.csv", DataFrame)
logs_RSD_5 = CSV.read("README_files/traffic-assignment-results/GoldCoast/logs_RSD_5.csv", DataFrame)
```

```{julia}
#| label: make-a-plot-traffic-assignment-results
#| echo: false
#| output: false

using Plots

plt = plot(
    1:nrow(logs_FW), logs_FW.relative_gap, 
    yaxis=:log,
    xlabel="Iteration",
    ylabel="Relative Gap",
    label="Frank-Wolfe"
)
plot!(
    1:nrow(logs_CFW), logs_CFW.relative_gap, 
    label="Conjugate Frank-Wolfe"
)
plot!(
    1:nrow(logs_RSD_5), logs_RSD_5.relative_gap, 
    label="Restricted Simplicial Decomposition (max_points=5)"

)
plot!(
    1:nrow(logs_BFW), logs_BFW.relative_gap, 
    label="Biconjugate Frank-Wolfe"

)
```

```{julia}
#| label: plot-traffic-assignment-results
#| echo: false

plt
```

## References

- [Maria Mitradjieva, Per Olov Lindberg, (2012) The Stiff Is Movingâ€”Conjugate Direction Frank-Wolfe Methods with Applications to Traffic Assignment*. Transportation Science 47(2):280-293.](https://doi.org/10.1287/trsc.1120.0409)
- [Hearn, D.W., Lawphongpanich, S., Ventura, J. (1987). Restricted simplicial decomposition: Computation and extensions. In: Hoffman, K.L., Jackson, R.H.F., Telgen, J. (eds) Computation Mathematical Programming. Mathematical Programming Studies, vol 31. Springer, Berlin, Heidelberg.](https://doi.org/10.1007/BFb0121181)
